version: '3.8'

services:
  # ===== BACKEND API =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tech-radar-backend
    ports:
      - "8000:8000"
    environment:
      # Configuration générale
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - ENCRYPT_KEY=your-encryption-key-32-chars-long
      - DEBUG=true
      - LOG_LEVEL=INFO
      
      # Database URLs
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tech_radar_db
      - REDIS_URL=redis://redis:6379/0
      
      # Supabase Configuration
      - SUPABASE_URL=https://your-project.supabase.co
      - SUPABASE_ANON_KEY=your-supabase-anon-key
      - SUPABASE_SERVICE_KEY=your-supabase-service-key
      - SUPABASE_JWT_SECRET=your-supabase-jwt-secret
      
      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4jpassword
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      
      # Langfuse Configuration
      - LANGFUSE_HOST=https://cloud.langfuse.com
      - LANGFUSE_PUBLIC_KEY=your-langfuse-public-key
      - LANGFUSE_SECRET_KEY=your-langfuse-secret-key
      - LANGFUSE_ENABLED=false
      
      # MCP Configuration  
      - MCP_CRAWL4AI_URL=https://mcp.crawl4ai.com
      - MCP_CRAWL4AI_TOKEN=your-mcp-token
      - MCP_ENABLED=true
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100
      
      # Task Scheduler
      - SCHEDULER_ENABLED=true
      - SCHEDULER_MAX_WORKERS=4
      
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - tech-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== DATABASE POSTGRESQL =====
  postgres:
    image: postgres:15-alpine
    container_name: tech-radar-postgres
    environment:
      - POSTGRES_DB=tech_radar_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/app_metadata_setup.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tech-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tech_radar_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== CACHE REDIS =====
  redis:
    image: redis:7-alpine
    container_name: tech-radar-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tech-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ===== GRAPH DATABASE NEO4J =====
  neo4j:
    image: neo4j:5.15-community
    container_name: tech-radar-neo4j
    environment:
      - NEO4J_AUTH=neo4j/neo4jpassword
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - tech-radar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4jpassword", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== TASK QUEUE WORKER =====
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tech-radar-celery-worker
    command: celery -A core.scheduler worker --loglevel=info --concurrency=2
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tech_radar_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - tech-radar-network
    restart: unless-stopped

  # ===== TASK QUEUE BEAT SCHEDULER =====
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tech-radar-celery-beat
    command: celery -A core.scheduler beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tech_radar_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - tech-radar-network
    restart: unless-stopped

  # ===== MONITORING =====
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: tech-radar-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - tech-radar-network
    restart: unless-stopped

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  redis_insight_data:
    driver: local

# ===== NETWORKS =====
networks:
  tech-radar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
"""
Tech Radar Express - Routes API Mode Focus
Endpoints pour la g√©n√©ration de synth√®ses rapides structur√©es
"""

from datetime import datetime
from typing import Optional, Dict, Any
from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel, Field
import structlog

from core.focus_mode_generator import get_focus_mode_generator, FocusMode, FocusSynthesis
from core.config_manager import get_settings

logger = structlog.get_logger(__name__)
router = APIRouter(prefix="/api/v1/focus", tags=["focus-mode"])

class FocusRequest(BaseModel):
    """Mod√®le de requ√™te pour mode focus"""
    mode: FocusMode = Field(FocusMode.TECH_PULSE, description="Mode de focus s√©lectionn√©")
    custom_query: Optional[str] = Field(None, description="Requ√™te personnalis√©e optionnelle")

class FocusResponse(BaseModel):
    """Mod√®le de r√©ponse pour synth√®se focus"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    metadata: Dict[str, Any] = {}

@router.post("/generate", response_model=FocusResponse)
async def generate_focus_synthesis(
    request: FocusRequest,
    generator=Depends(get_focus_mode_generator)
):
    """
    G√©n√®re une synth√®se focus rapide selon le mode s√©lectionn√©
    
    - **mode**: Type de focus (quick_scan, tech_pulse, critical_alerts, innovation_radar)
    - **custom_query**: Requ√™te personnalis√©e pour cibler la recherche
    
    Retourne une synth√®se structur√©e g√©n√©r√©e en moins de 2 minutes.
    """
    try:
        logger.info(
            "Synth√®se focus demand√©e",
            mode=request.mode.value,
            custom_query=bool(request.custom_query)
        )
        
        # G√©n√©ration de la synth√®se avec timeout
        synthesis = await generator.generate_focus_synthesis(
            mode=request.mode,
            custom_query=request.custom_query
        )
        
        # Formatage de la r√©ponse
        response_data = {
            "synthesis": {
                "mode": synthesis.mode.value,
                "insights": [
                    {
                        "title": insight.title,
                        "summary": insight.summary,
                        "impact_level": insight.impact_level,
                        "tech_area": insight.tech_area,
                        "keywords": insight.keywords
                    }
                    for insight in synthesis.insights
                ],
                "key_trends": synthesis.key_trends,
                "critical_alerts": synthesis.critical_alerts,
                "innovation_highlights": synthesis.innovation_highlights,
                "stats": {
                    "generation_time": synthesis.generation_time,
                    "sources_analyzed": synthesis.sources_analyzed,
                    "confidence_score": synthesis.confidence_score,
                    "timestamp": synthesis.timestamp.isoformat()
                }
            }
        }
        
        logger.info(
            "Synth√®se focus g√©n√©r√©e",
            mode=request.mode.value,
            insights_count=len(synthesis.insights),
            generation_time=f"{synthesis.generation_time:.1f}s",
            confidence=f"{synthesis.confidence_score:.2f}"
        )
        
        return FocusResponse(
            success=True,
            data=response_data,
            metadata={
                "request_timestamp": datetime.now().isoformat(),
                "generation_time": synthesis.generation_time,
                "mode_config": {
                    "max_time": generator.focus_configs[request.mode]["target_time"],
                    "within_target": synthesis.generation_time <= generator.focus_configs[request.mode]["target_time"]
                }
            }
        )
        
    except Exception as e:
        logger.error("Erreur g√©n√©ration synth√®se focus", error=str(e))
        return FocusResponse(
            success=False,
            error=f"Erreur lors de la g√©n√©ration: {str(e)}",
            metadata={"error_timestamp": datetime.now().isoformat()}
        )

@router.get("/modes")
async def get_available_modes():
    """
    R√©cup√®re la liste des modes focus disponibles avec leurs configurations
    
    Retourne les diff√©rents modes de focus avec leurs temps cibles et descriptions.
    """
    try:
        modes_info = {
            "quick_scan": {
                "name": "Scan Rapide",
                "description": "Analyse express des derni√®res tendances",
                "target_time": 30,
                "emoji": "‚ö°",
                "focus_areas": ["Nouvelles importantes", "Tendances √©mergentes", "Alertes urgentes"]
            },
            "tech_pulse": {
                "name": "Pouls Technologique", 
                "description": "Vue d'ensemble √©quilibr√©e de l'√©cosyst√®me tech",
                "target_time": 60,
                "emoji": "üíì",
                "focus_areas": ["Frontend & Backend", "DevOps & Mobile", "Innovations cl√©s"]
            },
            "critical_alerts": {
                "name": "Alertes Critiques",
                "description": "Focus sur les points critiques et urgences",
                "target_time": 45,
                "emoji": "üö®",
                "focus_areas": ["S√©curit√©", "Vuln√©rabilit√©s", "Breaking changes"]
            },
            "innovation_radar": {
                "name": "Radar Innovation",
                "description": "Exploration des technologies √©mergentes",
                "target_time": 90,
                "emoji": "üöÄ",
                "focus_areas": ["Emerging Tech", "AI/ML", "Technologies disruptives"]
            }
        }
        
        return FocusResponse(
            success=True,
            data={"modes": modes_info},
            metadata={
                "total_modes": len(modes_info),
                "retrieved_at": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        logger.error("Erreur r√©cup√©ration modes", error=str(e))
        return FocusResponse(
            success=False,
            error=f"Erreur lors de la r√©cup√©ration: {str(e)}"
        )

@router.get("/quick")
async def quick_focus(
    query: Optional[str] = None,
    generator=Depends(get_focus_mode_generator)
):
    """
    G√©n√©ration focus ultra-rapide (mode QUICK_SCAN)
    
    - **query**: Requ√™te personnalis√©e optionnelle
    
    Endpoint optimis√© pour une synth√®se en 30 secondes maximum.
    """
    try:
        synthesis = await generator.generate_focus_synthesis(
            mode=FocusMode.QUICK_SCAN,
            custom_query=query
        )
        
        # R√©ponse simplifi√©e pour usage rapide
        quick_data = {
            "insights_count": len(synthesis.insights),
            "key_highlights": [insight.title for insight in synthesis.insights[:3]],
            "trends_count": len(synthesis.key_trends),
            "alerts_count": len(synthesis.critical_alerts),
            "generation_time": synthesis.generation_time,
            "confidence": synthesis.confidence_score,
            "summary_text": generator.format_summary(synthesis)
        }
        
        return FocusResponse(
            success=True,
            data={"quick_focus": quick_data},
            metadata={
                "mode": "quick_scan",
                "generated_at": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        logger.error("Erreur quick focus", error=str(e))
        return FocusResponse(
            success=False,
            error=f"Erreur g√©n√©ration rapide: {str(e)}"
        )

@router.get("/text")
async def get_focus_text(
    mode: FocusMode = FocusMode.TECH_PULSE,
    query: Optional[str] = None,
    generator=Depends(get_focus_mode_generator)
) -> PlainTextResponse:
    """
    G√©n√®re une synth√®se focus format√©e en texte brut
    
    - **mode**: Mode de focus d√©sir√©
    - **query**: Requ√™te personnalis√©e optionnelle
    
    Retourne la synth√®se directement en format texte pour affichage ou copie.
    """
    try:
        synthesis = await generator.generate_focus_synthesis(
            mode=mode,
            custom_query=query
        )
        
        # Formatage en texte avec en-t√™te
        text_content = f"""Tech Radar Express - Mode Focus
G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

{generator.format_summary(synthesis)}

---
Temps de g√©n√©ration: {synthesis.generation_time:.1f}s
Score de confiance: {synthesis.confidence_score:.0%}
Sources analys√©es: {synthesis.sources_analyzed}
"""
        
        return PlainTextResponse(
            content=text_content,
            media_type="text/plain",
            headers={
                "Content-Disposition": f"attachment; filename=focus-{mode.value}-{datetime.now().strftime('%Y%m%d-%H%M')}.txt"
            }
        )
        
    except Exception as e:
        logger.error("Erreur g√©n√©ration texte focus", error=str(e))
        raise HTTPException(
            status_code=500,
            detail=f"Erreur g√©n√©ration texte: {str(e)}"
        )

@router.post("/benchmark")
async def benchmark_focus_modes(
    generator=Depends(get_focus_mode_generator)
):
    """
    Lance un benchmark de tous les modes focus pour √©valuer les performances
    
    Utile pour tester les temps de r√©ponse et la qualit√© des synth√®ses.
    """
    try:
        benchmark_results = {}
        
        for mode in FocusMode:
            try:
                logger.info(f"Benchmark mode {mode.value}")
                
                synthesis = await generator.generate_focus_synthesis(mode=mode)
                
                benchmark_results[mode.value] = {
                    "success": True,
                    "generation_time": synthesis.generation_time,
                    "target_time": generator.focus_configs[mode]["target_time"],
                    "within_target": synthesis.generation_time <= generator.focus_configs[mode]["target_time"],
                    "confidence_score": synthesis.confidence_score,
                    "insights_count": len(synthesis.insights),
                    "trends_count": len(synthesis.key_trends),
                    "alerts_count": len(synthesis.critical_alerts),
                    "innovations_count": len(synthesis.innovation_highlights)
                }
                
            except Exception as e:
                benchmark_results[mode.value] = {
                    "success": False,
                    "error": str(e),
                    "generation_time": 0,
                    "target_time": generator.focus_configs[mode]["target_time"]
                }
        
        # Calcul des statistiques globales
        successful_modes = [r for r in benchmark_results.values() if r["success"]]
        avg_time = sum(r["generation_time"] for r in successful_modes) / len(successful_modes) if successful_modes else 0
        success_rate = len(successful_modes) / len(FocusMode)
        
        return FocusResponse(
            success=True,
            data={
                "benchmark_results": benchmark_results,
                "global_stats": {
                    "success_rate": success_rate,
                    "avg_generation_time": avg_time,
                    "total_modes_tested": len(FocusMode),
                    "successful_modes": len(successful_modes)
                }
            },
            metadata={
                "benchmark_timestamp": datetime.now().isoformat(),
                "total_duration": sum(r.get("generation_time", 0) for r in benchmark_results.values())
            }
        )
        
    except Exception as e:
        logger.error("Erreur benchmark focus", error=str(e))
        return FocusResponse(
            success=False,
            error=f"Erreur benchmark: {str(e)}"
        )

@router.get("/stats")
async def get_focus_stats(
    generator=Depends(get_focus_mode_generator)
):
    """
    R√©cup√®re les statistiques du g√©n√©rateur de mode focus
    
    Retourne des m√©triques sur les performances et la configuration.
    """
    try:
        stats = {
            "service_status": "active",
            "available_modes": [mode.value for mode in FocusMode],
            "mode_configurations": {
                mode.value: {
                    "target_time": config["target_time"],
                    "max_sources": config["max_sources"],
                    "max_insights": config["max_insights"],
                    "focus_areas": config["areas"]
                }
                for mode, config in generator.focus_configs.items()
            },
            "features": {
                "parallel_processing": True,
                "timeout_protection": True,
                "confidence_scoring": True,
                "custom_queries": True,
                "text_export": True,
                "benchmark_mode": True
            },
            "performance_targets": {
                "quick_scan": "30s",
                "tech_pulse": "60s", 
                "critical_alerts": "45s",
                "innovation_radar": "90s"
            }
        }
        
        return FocusResponse(
            success=True,
            data={"stats": stats},
            metadata={"retrieved_at": datetime.now().isoformat()}
        )
        
    except Exception as e:
        logger.error("Erreur r√©cup√©ration stats focus", error=str(e))
        return FocusResponse(
            success=False,
            error=f"Erreur stats: {str(e)}"
        ) 